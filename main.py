import logging
import os
from telegram.ext import *
import string
from threading import *
from random import choice
from images_class import Filter
# from telegram.ext import Application, MessageHandler, filters
from requestsserver import Stoke_Market_chart
# from database import Database
from adminregistration import Admin_registration
from stoke_analysis import Moex_ta
from registration import Registration
from telegram import *
from token_bot import TOKEN
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


reply_keyboard = [['/stockmarket', '/functions'],
                  ['/settings', '/info_admin']]
reply_keyboard_2 = [['/send_document']]
reply_keyboard_3 = [['/start']]
reply_keyboard_4 = [['/main_menu']]
reply_keyboard_5 = [['/documentation', '/admin_user'],
                    ['/main_menu']]
reply_keyboard_6 = [['/chart', '/analysis'],
                    ['/main_menu']]
reply_keyboard_7 = [['/work_music'], ['/main_menu']]
reply_keyboard_8 = [['/functions'], ['/main_menu']]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
markup_2 = ReplyKeyboardMarkup(reply_keyboard_2, one_time_keyboard=False)
markup_3 = ReplyKeyboardMarkup(reply_keyboard_3, one_time_keyboard=True)
markup_4 = ReplyKeyboardMarkup(reply_keyboard_4, one_time_keyboard=True)
markup_5 = ReplyKeyboardMarkup(reply_keyboard_5, one_time_keyboard=False)
markup_6 = ReplyKeyboardMarkup(reply_keyboard_6, one_time_keyboard=True)
markup_7 = ReplyKeyboardMarkup(reply_keyboard_7, one_time_keyboard=False)
markup_8 = ReplyKeyboardMarkup(reply_keyboard_8, one_time_keyboard=True)

PHOTO = 1


async def start(update, context):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                                    reply_markup=markup_4)


async def admin_user(update, context):
    try:
        login_admin = context.args[0]
        password_admin = context.args[1]
        object_class = Admin_registration(login_admin, password_admin)
        if object_class.is_checking_for_admin():
            # a = Database()
            # a1 = a.read_database()
            # await update.message.reply_text(f"{a1}")
            await update.message.reply_text("üìÅ")
            await update.message.reply_document('history_users.txt')
        else:
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
    except IndexError:
        await update.message.reply_text("–∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")



async def documentation(update, context):
    await update.message.reply_text('üìÅ')
    await update.message.reply_document('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.docx')


async def main_menu(update, context):
    user = update.effective_user
    text = '–Ø –±–æ—Ç, –∏–º–µ—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏—Ä–∂–∏, –∏ –∏–º–µ—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! {text}, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        reply_markup=markup
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é")


async def admin_passwd(update, context):
    try:
        login_admin = context.args[0]
        password_admin = context.args[1]
        object_class = Admin_registration(login_admin, password_admin)
        if object_class.checking_for_admin():
            object_class.registration_admin()
            await update.message.reply_text("üîê")
            await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞!")
            await update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ', reply_markup=markup_3)
        else:
            await update.message.reply_text("‚ùå")
            await update.message.reply_text("–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω—è—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
    except IndexError:
        await update.message.reply_text("–∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")


async def analysis(update, context):
    try:
        activ = context.args
        if len(activ) == 0:
            text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ '/analysis {—Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏} {—Ç–∞–π–º—Ñ—Ä–µ–π–º}'"
            text_2 = '–ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–∞–π—Ñ—Ä–µ–π–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Ç–∞–π—Ñ—Ä–µ–π–º'
            await update.message.reply_text(
                f'{text} {text_2}. –°–ø–∏—Å–∫–æ–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ')
            await update.message.reply_document('timeframes.txt')
        else:
            if len(activ) == 1:
                object_class_Moex_one_argument = Moex_ta(activ[0])
                await update.message.reply_text(object_class_Moex_one_argument.technical_analysis())

            elif len(activ) == 2:
                object_class_Moex_two = Moex_ta(activ[0], activ[1])
                await update.message.reply_text(object_class_Moex_two.technical_analysis())

            else:
                await update.message.reply_text('–í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
                await update.message.reply_document('timeframes.txt')
    except BaseException:
        await update.message.reply_text("–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


async def work_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ!")

    return PHOTO


async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    string_random = ''.join([choice([element for element in string.ascii_letters]) for _ in range(10)])
    photo_file = await update.message.photo[-1].get_file()
    name_file = f"user_photo{string_random}.jpg"
    await photo_file.download_to_drive(name_file)
    logger.info("Photo of %s: %s", user.first_name, name_file)
    object_class = Filter(name_file)
    file = object_class.script_1
    await update.message.reply_photo(file)
    object_class.delete()
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup_8)
    return ConversationHandler.END


async def help(update, context):
    URL = 'https://disk.yandex.ru/i/NJ3zby3bwgm9lA'
    await update.message.reply_html(rf'–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∏ <a href="{URL}">—Ç—É—Ç</a>')
    await update.message.reply_document(
        "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.docx")


async def chart(update, context):
    try:
        active = context.args[0]
        initial_time = context.args[1]
        end_time = context.args[2]
        object_5 = Stoke_Market_chart(active, initial_time, end_time)
        active_write = Registration(active)
        active_write.request_write()
        file_name = object_5.chart()
        await update.message.reply_photo(file_name)
        await update.message.reply_text(f'{active} {initial_time} {end_time}')
        os.remove(file_name)
        # active_write_2 = Database()
        # active_write_2.write_database(active)
    except BaseException:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')


async def information_admin(update, context):
    await update.message.reply_text(
        "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –†—è–∑–∞–Ω–æ–≤, –†–æ–º–∞–Ω", reply_markup=markup_4)


async def stockmarket(update, context):
    await update.message.reply_text("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–µ–Ω —Ä–µ–∂–∏–º '–±–∏—Ä–∂–∞' –≤–∏–±–∏—Ä–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è", reply_markup=markup_6)


async def delete(update, context):
    await update.message.reply_text("")


async def functions(update, context):
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup_7)


async def settings(update, context):
    await update.message.reply_text('üí°', reply_markup=markup_5)


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chart", chart))
    application.add_handler(CommandHandler("analysis", analysis))
    application.add_handler(CommandHandler("admin_user", admin_user))
    application.add_handler(CommandHandler("documentation", documentation))
    application.add_handler(CommandHandler('main_menu', main_menu))
    application.add_handler(CommandHandler("info_admin", information_admin))
    application.add_handler(CommandHandler("stockmarket", stockmarket))
    application.add_handler(CommandHandler("functions", functions))
    application.add_handler(CommandHandler("settings", settings))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("work_music", work_music)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, photo)]
        },
        fallbacks=[CommandHandler("photo", photo)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("admin_passwd", admin_passwd))
    application.run_polling()


if __name__ == '__main__':
    main()