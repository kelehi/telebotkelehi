import os
import string
from random import choice

import logging
from telegram.ext import *
from telegram import *

from token_bot import TOKEN
from images_class import Filter
from database import Database
from requestsserver import Sto—Åke_Market_chart
from adminregistration import Admin_registration
from stoke_analysis import Moex_ta, Crypto
from write_text import Write


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_keyboard = [['/stockmarket', '/functions'],
                  ['/settings', '/info_admin']]
reply_keyboard_2 = [['/send_document']]
reply_keyboard_3 = [['/start']]
reply_keyboard_4 = [['/main_menu']]
reply_keyboard_5 = [['/documentation', '/admin_user'],
                    ['/main_menu']]
reply_keyboard_6 = [['/start_chart', '/analysis'],
                    ['/main_menu']]
reply_keyboard_7 = [['/work_photo'], ['/send_music'],
                    ['/main_menu']]
reply_keyboard_8 = [['/functions'], ['/main_menu']]
reply_keyboard_9 = [['/start_analysis_stocks'], ['/start_crypto'],
                    ['/main_menu']]
reply_keyboard_10 = [['/main_menu']]
reply_keyboard_11 = [['/stockmarket'], ['/analysis'],
                     ['/main_menu']]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
markup_2 = ReplyKeyboardMarkup(reply_keyboard_2, one_time_keyboard=False)
markup_3 = ReplyKeyboardMarkup(reply_keyboard_3, one_time_keyboard=True)
markup_4 = ReplyKeyboardMarkup(reply_keyboard_4, one_time_keyboard=True)
markup_5 = ReplyKeyboardMarkup(reply_keyboard_5, one_time_keyboard=False)
markup_6 = ReplyKeyboardMarkup(reply_keyboard_6, one_time_keyboard=True)
markup_7 = ReplyKeyboardMarkup(reply_keyboard_7, one_time_keyboard=False)
markup_8 = ReplyKeyboardMarkup(reply_keyboard_8, one_time_keyboard=True)
markup_9 = ReplyKeyboardMarkup(reply_keyboard_9, one_time_keyboard=False)
markup_10 = ReplyKeyboardMarkup(reply_keyboard_10, one_time_keyboard=False)
markup_11 = ReplyKeyboardMarkup(reply_keyboard_11, one_time_keyboard=False)

PHOTO = 1
MUSIC = 2
CHART = 3
CRYPTOCURRENCY = 4
STOCK_MARKET = 5

database = Database()


async def start(update, context):  # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup_4)


async def main_menu(update, context):  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    text = '–Ø –±–æ—Ç, –∏–º–µ—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏—Ä–∂–∏, –∏ –∏–º–µ—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
    await update.message.reply_text(
        f"{text}, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –ø—É–Ω–∫—Ç–µ 'settings' 'documentation'", reply_markup=markup)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é")


async def stockmarket(update, context):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–±–∏—Ä–∂–∞'
    await update.message.reply_text("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–µ–Ω —Ä–µ–∂–∏–º '–±–∏—Ä–∂–∞' –≤–∏–±–∏—Ä–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=markup_6)


async def functions(update, context):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup_7)


async def settings(update, context):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
    await update.message.reply_text('üí°', reply_markup=markup_5)


async def information_admin(update, context):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    await update.message.reply_text(
        "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –†—è–∑–∞–Ω–æ–≤, –†–æ–º–∞–Ω", reply_markup=markup_4)


async def analysis(update, context):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '—Ç–µ—Ö–Ω—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup_9)


async def start_chart(update, context):  # –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: YNDX 23-11-01 24-04-15')

    return CHART


async def chart(update, context):  # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    try:
        active = str(update.message.text).split()[0]
        initial_time = str(update.message.text).split()[1]
        end_time = str(update.message.text).split()[2]
        base = Sto—Åke_Market_chart(active, initial_time, end_time)
        database.write_database(active, initial_time, end_time)
        active_write = Write(active)
        active_write.request_write()
        file_name = base.chart()
        await update.message.reply_photo(file_name)
        await update.message.reply_text(f'{active} {initial_time} {end_time}')
        os.remove(file_name)

    except BaseException:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')

    return ConversationHandler.END


async def start_analysis_stocks(update, context):  # —Å—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ (–ê–∫—Ü–∏–∏)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: ASTR 1w. –§–∞–π–ª —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ")
    await update.message.reply_document('timeframes.txt')

    return STOCK_MARKET


async def analysis_stocks(update, context):  # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ê–∫—Ü–∏–∏)
    try:
        activ = str(update.message.text).split()
        if len(activ) == 1:
            active_write = Write(activ[0])
            active_write.request_write()
            activ_1 = Moex_ta(activ[0])
            await update.message.reply_text(activ_1.technical_analysis(),
                                            reply_markup=markup_11)

        elif len(activ) == 2:
            active_write = Write(activ[0])
            active_write.request_write()
            activ_2 = Moex_ta(activ[0], activ[1])
            await update.message.reply_text(activ_2.technical_analysis(), reply_markup=markup_11)

    except BaseException:
        text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ {—Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏} {—Ç–∞–π–º—Ñ—Ä–µ–π–º}'"
        text_2 = '–ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–∞–π—Ñ—Ä–µ–π–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Ç–∞–π—Ñ—Ä–µ–π–º'
        await update.message.reply_text(
            f'{text} {text_2}. –°–ø–∏—Å–∫–æ–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ')
        await update.message.reply_text(f"–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=markup_11)
        await update.message.reply_document('timeframes.txt')

    return ConversationHandler.END


async def start_crypto(update, context):  # —Å—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ (–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)
    text = '–§–∞–π–ª —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ'
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–∏—Ç–∫–æ–∏–Ω–∞: BTCUSD 1w. {text}")
    await update.message.reply_document('timeframes.txt')

    return CRYPTOCURRENCY


async def cryptocurrency(update, context):  # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)
    try:
        activ = str(update.message.text).split()

        if len(activ) == 1:
            active_write = Write(activ[0])
            active_write.request_write()
            activ_1 = Crypto(activ[0])
            await update.message.reply_text(activ_1.technical_analysis())

        elif len(activ) == 2:
            active_write = Write(activ[0])
            active_write.request_write()
            active_2 = Crypto(activ[0], activ[1])
            await update.message.reply_text(active_2.technical_analysis(), reply_markup=markup_11)

    except BaseException:
        text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ {—Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã} {—Ç–∞–π–º—Ñ—Ä–µ–π–º}'"
        text_2 = '–ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–∞–π—Ñ—Ä–µ–π–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Ç–∞–π—Ñ—Ä–µ–π–º'
        await update.message.reply_text(
            f'{text} {text_2}. –°–ø–∏—Å–∫–æ–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ')
        await update.message.reply_text('–í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.', reply_markup=markup_11)
        await update.message.reply_document('timeframes.txt')

    return ConversationHandler.END


async def documentation(update, context):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    await update.message.reply_text('üìÅ')
    await update.message.reply_document('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.docx')


async def admin_user(update, context):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º, –µ—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        login_admin = context.args[0]
        password_admin = context.args[1]
        object_class = Admin_registration(login_admin, password_admin)
        if object_class.is_checking_for_admin():
            await update.message.reply_text("üìÅ")
            await update.message.reply_document('history_users.txt')
            await update.message.reply_text(f'{database.read_database()}')
        else:
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')

    except IndexError:
        await update.message.reply_text("–∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


async def send_music(update, context):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    await update.message.reply_audio('file_audio.mp3')


async def work_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):  # –°—Ç–∞—Ä—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ
    await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ!")

    return PHOTO


async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    user = update.message.from_user
    string_random = ''.join([choice([element for element in string.ascii_letters]) for _ in range(10)])
    photo_file = await update.message.photo[-1].get_file()
    name_file = f"user_photo{string_random}.jpg"
    await photo_file.download_to_drive(name_file)
    logger.info("Photo of %s: %s", user.first_name, name_file)
    object_class = Filter(name_file)
    file = object_class.script_1
    await update.message.reply_photo(file)
    object_class.delete()
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup_8)

    return ConversationHandler.END


async def admin_passwd(update, context):  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞
    try:
        login_admin = context.args[0]
        password_admin = context.args[1]
        object_class = Admin_registration(login_admin, password_admin)
        if object_class.checking_for_admin():
            object_class.registration_admin()
            await update.message.reply_text("üîê")
            await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞!")
            await update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ', reply_markup=markup_3)
        else:
            await update.message.reply_text("‚ùå")
            await update.message.reply_text("–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω—è—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                            reply_markup=markup_10)
    except IndexError:
        await update.message.reply_text("–∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")


async def help(update, context):  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    URL = 'https://disk.yandex.ru/i/NJ3zby3bwgm9lA'
    await update.message.reply_html(rf'–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∏ <a href="{URL}">—Ç—É—Ç</a>')
    await update.message.reply_document(
        "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.docx")


def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin_user", admin_user))
    application.add_handler(CommandHandler("documentation", documentation))
    application.add_handler(CommandHandler("send_music", send_music))
    application.add_handler(CommandHandler('main_menu', main_menu))
    application.add_handler(CommandHandler("info_admin", information_admin))
    application.add_handler(CommandHandler("stockmarket", stockmarket))
    application.add_handler(CommandHandler("functions", functions))
    application.add_handler(CommandHandler("settings", settings))
    application.add_handler(CommandHandler('analysis', analysis))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("admin_passwd", admin_passwd))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("work_photo", work_photo)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, photo)]
        },
        fallbacks=[CommandHandler("photo", photo)],
    )

    conv_handler_2 = ConversationHandler(
        entry_points=[CommandHandler("start_chart", start_chart)],
        states={
            CHART: [MessageHandler(filters.TEXT, chart)]
        },
        fallbacks=[CommandHandler("chart", chart)]
    )

    conv_handler_3 = ConversationHandler(
        entry_points=[CommandHandler("start_analysis_stocks", start_analysis_stocks)],
        states={
            STOCK_MARKET: [MessageHandler(filters.TEXT, analysis_stocks)]
        },
        fallbacks=[CommandHandler("analysis_stocks", analysis_stocks)],
    )

    conv_handler_4 = ConversationHandler(
        entry_points=[CommandHandler("start_crypto", start_crypto)],
        states={
            CRYPTOCURRENCY: [MessageHandler(filters.TEXT, cryptocurrency)]
        },
        fallbacks=[CommandHandler("cryptocurrency", cryptocurrency)],
    )

    application.add_handler(conv_handler)
    application.add_handler(conv_handler_2)
    application.add_handler(conv_handler_3)
    application.add_handler(conv_handler_4)
    application.run_polling()


if __name__ == '__main__':
    main()
